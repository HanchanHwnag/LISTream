<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
	<!-- 모든 User 선택 -->
	<select id="selectAll" resultType="spring.project.db.UserVO">
		select * from user_info where id not in ('admin1', 'admin2', 'admin3', 'admin4', 'admin5')
	</select>
	<!-- 특정 User 선택 -->
	<select id="selectOne" resultType="spring.project.db.UserVO">
		select * from user_info where id = #{id}
	</select>
	<!-- Genre 선택 -->
	<select id="selectGenre" resultType="spring.project.db.GenreVO">
		select * from genre
	</select>
	<!-- User 삽입 -->
	<insert id="insertOne" parameterType="spring.project.db.UserVO">
		insert into user_info values(user_info_seq.nextval, #{id}, #{pwd}, #{name}, #{email})
	</insert>
	<!-- Music 삽입 -->
	<insert id="insertMusic" parameterType="spring.project.db.MusicVO">
		insert into music values(music_seq.nextval, #{artist}, #{music_title}, #{path}, 0, sysdate, #{genre_code})
	</insert>
	<!-- User totalCount 검색 -->
	<select id="userTotalCount" resultType="Integer">
		select count(*) from user_info  where id not in ('admin1', 'admin2', 'admin3', 'admin4', 'admin5')
	</select>
	<!-- User 검색 -->
	<select id="selectUser" parameterType="java.util.Map" resultType="spring.project.db.UserVO">
		select * from (
			select rownum r_num, a.* from 
				(select * from user_info where id not in ('admin1', 'admin2', 'admin3', 'admin4', 'admin5')) a order by r_num
		) where r_num between #{begin} and #{end}
	</select>
	<!-- User 삭제 -->
	<delete id="deleteUser" parameterType="java.util.List">
		delete from user_info where user_info_code = #{user_info_code}
	</delete>
	<!-- USer Search 기능 -->
	<select id="searchUser" resultType="spring.project.db.UserVO" parameterType="String">
		select * from (
			select rownum r_num, a.* from 
				(select * from user_info where id = #{id} and id not in ('admin1', 'admin2', 'admin3', 'admin4', 'admin5')) a
		) 
	</select>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Music 관련 -->
	<!-- 음악 검색 < 7(ajax), genre가 없는 경우(all) -->
	<select id="searchMusic" resultType="spring.project.db.MusicVO" parameterType="java.util.Map">
		select distinct ${field} from (
			select rownum r_num, a.* from (
				(select * from music where lower(${field}) LIKE '%' || lower(#{search_text}) || '%' order by music_hit desc) a)
			) where r_num <![CDATA[<]]> 7
	</select>
	<!-- 음악 검색 < 7(ajax), genre가 있는 경우 -->
	<select id="searchMusicAddGenre" resultType="spring.project.db.MusicVO" parameterType="java.util.Map">
		select distinct ${field} from (
			select rownum r_num, a.* from (
				(select * from music where lower(${field}) LIKE '%' || lower(#{search_text}) || '%' and genre_code = #{genre} order by music_hit desc) a)
			) where r_num <![CDATA[<]]> 7
	</select>
	<!-- 전체 검색 -->
	<select id="selectMusicTotalCount" resultType="Integer">
		select count(*) from music
	</select>
	<select id="selectMusic" resultType="spring.project.db.MusicVO">
		select * from (
			select rownum r_num, a.* from (
				(select * from music order by music_hit desc) a)
			) where r_num between #{begin} and #{end} 
	</select>
	<!-- Title을 이용한 검색 -->
	<select id="selectMusicByTitleTotalCount" resultType="Integer" parameterType="java.util.Map">
		select count(*) from (select * from music where lower(${field}) = lower(#{search_text}))
	</select>
	<select id="selectMusicByTitle" resultType="spring.project.db.MusicVO" parameterType="java.util.Map">
		select * from (
			select rownum r_num, a.* from (
				(select * from music where lower(${field}) = lower(#{search_text}) order by music_hit desc) a)
			) where r_num between #{begin} and #{end} 
	</select>
	<!-- Genre를 이용한 검색 -->
	<select id="selectMusicByGenreTotalCount" resultType="Integer" parameterType="java.util.Map">
		select count(*) from (select * from music where genre_code = #{genre})
	</select>
	<select id="selectMusicByGenre" resultType="spring.project.db.MusicVO" parameterType="java.util.Map">
		select * from (
			select rownum r_num, a.* from (
				select * from music where genre_code = #{genre} order by music_hit desc) a
			) where r_num between #{begin} and #{end} 
	</select>
	<!-- Title And Genre를 이용한 검색 -->
	<select id="selectMusicByGenreAndTitleTotalCount" resultType="Integer" parameterType="java.util.Map">
		select count(*) from (
			select * from music where genre_code = #{genre} and lower(${field}) = lower(#{search_text}))
	</select>
	<select id="selectMusicByGenreAndTitle" resultType="spring.project.db.MusicVO" parameterType="java.util.Map">
		select * from (
			select rownum r_num, a.* from (
				(select * from music where genre_code = #{genre} and lower(${field}) = lower(#{search_text}) order by music_hit desc) a)
			) where r_num between #{begin} and #{end} 
	</select>
	<!-- PlayList -->
	<select id="selectPlayListList" resultType="spring.project.db.PlayListVO" parameterType="java.lang.String">
		select distinct playlist_code, playlist_title, playlist.user_info_code, playlist.hit 
			from playlist, user_info where playlist.user_info_code = user_info.user_info_code 
				and user_info.user_info_code = #{user_info_code}
	</select>
	<!-- PlayList Music -->
	<select id="selectPlayListMusic" resultType="spring.project.db.MusicVO" parameterType="java.lang.String">
		select music.music_title 
			from playlist, user_info, musiclist, music 
			where music.music_code = musiclist.music_code 
			  and musiclist.playlist_code = playlist.playlist_code
			  and user_info.user_info_code = #{user_info_code}
			  and playlist.playlist_code = #{playlist_code}
	</select>
	<!-- Playlist에 음악 삽입 -->
	<select id="insertMusicInPlayList" parameterType="java.util.Map">
		insert into musiclist values(musiclist_seq.nextval,#{music_code},#{playlist_code})
	</select>
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- PlayList 관련 -->
	<!-- Theme 가져오기 -->
	<select id="selectTheme" resultType="spring.project.db.ThemeVO">
		select * from theme
	</select>
	<!-- PlayList 갯수 가져오기 -->
	<select id="selectPlayListByThemeTotalCount" resultType="Integer" parameterType="Map">
		select count(*) from (
 			select rownum r_num, a.* from (
    			(select * from playlist 
    				<where>
    					<if test="theme_code != 0">
					         theme_code = #{theme_code}
					    </if> 
    				</where>
    			order by hit) a)
    		) 
	</select>
	<!-- PlayList 가져오기 -->
	<select id="selectPlayListByTheme" resultType="spring.project.db.PlayListVO" parameterType="Map">
		select * from (
 			select rownum r_num, a.* from (
    			(select * from playlist 
    				<where>
    					<if test="theme_code != 0">
					         theme_code = #{theme_code}
					    </if> 
    				</where>
    			order by hit) a)
    		) where r_num between #{begin} and #{end}
	</select>
	
	<!-- 즐겨찾기에 플레이리스트 삽입 -->
	<insert id="insertPlayListInFavorite" parameterType="Map">
		insert into favorite values(favorite_seq.nextval, #{user_info_code}, #{playlist_code})
	</insert>
	
	<!-- 상세 플레이리스트 출력 -->
	<select id="selectPlayListDetail" resultType="spring.project.db.MusicVO" parameterType="Map">
		select rownum r_num, a.* from 
      		(select * from music where music_code in 
      			(select music_code from musiclist where playlist_code = #{playlist_code})) a
	</select>
</mapper>